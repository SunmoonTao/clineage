# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2017-05-05 12:06
from __future__ import unicode_literals
from django.db import migrations, models
from frogress import bar


def dedup_mas(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    MicrosatelliteAlleleSet = apps.get_model("calling","MicrosatelliteAlleleSet")
    for mas in bar(MicrosatelliteAlleleSet.objects.using(db_alias).all()):
        for mas_dup in MicrosatelliteAlleleSet.objects.using(db_alias).exclude(
                id=mas.id).filter(
                allele1=mas.allele1,
                allele2=mas.allele2,
                allele3=mas.allele3,
                allele4=mas.allele4,
        ):
            for ca in mas_dup.calledalleles_set.all():
                ca.genotypes = mas  # Update called allele pointing at the dup
                ca.save()
            mas_dup.delete()
    print()


def update_mas_null_to_zero(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    MicrosatelliteAlleleSet = apps.get_model("calling", "MicrosatelliteAlleleSet")
    for mas in bar(MicrosatelliteAlleleSet.objects.using(db_alias).all()):
        if mas.allele1 is None:
            mas.allele1 = 0
        if mas.allele2 is None:
            mas.allele2 = 0
        if mas.allele3 is None:
            mas.allele3 = 0
        if mas.allele4 is None:
            mas.allele4 = 0
        mas.save()
    print()


def update_mas_zero_to_null(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    MicrosatelliteAlleleSet = apps.get_model("calling", "MicrosatelliteAlleleSet")
    for mas in bar(MicrosatelliteAlleleSet.objects.using(db_alias).all()):
        if mas.allele1 == 0:
            mas.allele1 = None
        if mas.allele2 == 0:
            mas.allele2 = None
        if mas.allele3 == 0:
            mas.allele3 = None
        if mas.allele4 == 0:
            mas.allele4 = None
        mas.save()
    print()


class Migration(migrations.Migration):

    dependencies = [
        ('calling', '0003_highestpeaksproximityratiofilteredbisimcorschememodel_proximityratiofilteredboundproportionalsimcors'),
    ]

    operations = [
        migrations.RunPython(
            code=dedup_mas,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_mas_null_to_zero,
            reverse_code=update_mas_zero_to_null,
        ),

        migrations.AlterField(
            model_name='microsatellitealleleset',
            name='allele1',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='microsatellitealleleset',
            name='allele2',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='microsatellitealleleset',
            name='allele3',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='microsatellitealleleset',
            name='allele4',
            field=models.PositiveSmallIntegerField(default=0),
        ),
    ]
