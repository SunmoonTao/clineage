# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-20 15:00
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
from utils.ms_utils import ms_type_permutations
from frogress import bar
from linapp.migrations.mig_0004.utils import getdna


def get_sequence(s):
    if s._sequence is not None:
        return s._sequence
    else:
        return getdna(s.chromosome, s.start_pos, s.end_pos)


def get_repeat_unit_ref_seq_forward(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Microsatellite = apps.get_model("planning", "Microsatellite")
    for rut_dict in Microsatellite.objects.using(db_alias).values('repeat_unit_type').distinct():
        rut = rut_dict['repeat_unit_type']
        repeat_type_variants = set(ms_type_permutations(rut))
        print('Migrating MSs of type {}'.format(rut))
        for ms in bar(Microsatellite.objects.using(db_alias).filter(repeat_unit_type=rut)):
            repeat_unit_ref_seq = get_sequence(ms.slice)[:ms.repeat_unit_len].decode("utf-8") 
            assert repeat_unit_ref_seq in repeat_type_variants
            ms.repeat_unit_ref_seq = repeat_unit_ref_seq
            ms.save()


def get_repeat_unit_ref_seq_reverse(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('genomes', '0002_create_dnaslice'),
        ('planning', '0003_auto_20160215_1652'),
    ]

    operations = [
        migrations.CreateModel(
            name='PhasedMicrosatellites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planning_version', models.PositiveIntegerField(db_index=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='targetenrichment',
            name='targets',
        ),
        migrations.AddField(
            model_name='microsatellite',
            name='repeat_unit_ref_seq',
            field=models.CharField(default='X', max_length=50),
            preserve_default=False,
        ),
        migrations.RunPython(get_repeat_unit_ref_seq_forward, get_repeat_unit_ref_seq_reverse),
        migrations.AlterField(
            model_name='targetenrichment',
            name='chromosome',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='genomes.Chromosome'),
        ),
        migrations.AddField(
            model_name='phasedmicrosatellites',
            name='microsatellites',
            field=models.ManyToManyField(to='planning.Microsatellite'),
        ),
        migrations.AddField(
            model_name='phasedmicrosatellites',
            name='slice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='genomes.DNASlice'),
        ),
    ]
